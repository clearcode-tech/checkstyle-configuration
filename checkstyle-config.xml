<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
    "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="Checker">

  <!--
      Выключает проверку отсутствия статического импорта в файлах тестов.
      Данный фильтр нельзя перенести в файл suppresion'ов, потому что он должен быть внутри модуля Checker. Аналогично
      нельзя перенести рядом с проверкой staticImportCheck, потому что проверка staticImportCheck находится внутри
      другого модуля.
  -->
  <module name="SuppressionSingleFilter">
    <property name="id" value="staticImportCheck"/>
    <property name="files" value=".*Test\.java"/>
  </module>


  <!-- Miscellaneous-->

  <!-- Проверяет отсутствие символа табуляции('\t') в файлах. -->
  <module name="FileTabCharacter"/>

  <!-- Проверяет, заканчиваются ли файлы пустой строкой. -->
  <module name="NewlineAtEndOfFile">
    <property name="fileExtensions" value="java"/>
  </module>

  <!-- Regexp -->

  <!-- Проверяет, что на одной строке нет более двух действий над stream. -->
  <module name="RegexpSingleline">
    <property name="format" value="(?!.util)\.stream\(\)\..*\)\..*\)\." />
    <property name="message" value="More than 2 action on stream can't be on one line." />
  </module>

  <module name="TreeWalker">

    <!-- Задаёт табуляцию в 4 пробела, а не 8. Иначе модуль проверки длины строки LineLength работает неправильно -->
    <property name="tabWidth" value="4"/>

    <!-- Regexp -->

    <!-- Проверяет наличие пустой строки после {, если перед ним не было переносов строки. -->
    <module name="Regexp">
      <property name="format" value="((?:(\S\)|(try|finally))))\s\{\n." />
      <property name="illegalPattern" value="true" />
      <property name="message" value="There must be empty line after the {." />
    </module>

    <!-- Проверяет наличие типа в параметрах лямбда выражений. -->
    <module name="Regexp">
      <property name="format" value="\([a-zA-Z]*(^\))*\s->" />
      <property name="illegalPattern" value="true" />
      <property name="message" value="There must be specified type of lambda parameter." />
    </module>

    <!-- Проверяет, что в javadoc'ах нет больше одной пустой строки подряд и в конце каждого предложения есть точка. -->
    <module name="Regexp">
      <property name="format" value="^\s*\*\s(?!@see)[^\n*]*[^.>/?O)]\n\s*\*(\s@|\n|\/)" />
      <property name="illegalPattern" value="true" />
      <property name="message" value="Comment must end with period and have not more than one empty line." />
    </module>

    <!-- Проверяет, что комментарии в коде после // имеют пробел. -->
    <module name="Regexp">
      <property name="format" value="^\s*\/\/[^a-zT\s]" />
      <property name="illegalPattern" value="true" />
      <property name="message" value="Must be space after //." />
    </module>

    <!-- Проверяет наличие пустой строки перед концом региона. -->
    <module name="Regexp">
      <property name="format" value="[^\s][ \t]*\n[ \t]*[^\n][ \t]*\/\/endregion" />
      <property name="illegalPattern" value="true" />
      <property name="message" value="Must be empty line before endregion." />
    </module>

    <!-- Проверяет отсутствие более одной пустой строки. -->
    <module name="Regexp">
      <property name="format" value="\n\n\n" />
      <property name="illegalPattern" value="true" />
      <property name="message" value="Must be only one empty line." />
    </module>

    <!-- Проверяет отсутствие пустой строки перед концом комментария. -->
    <module name="Regexp">
      <property name="format" value="\*\n\s*\*\/" />
      <property name="illegalPattern" value="true" />
      <property name="message" value="Can't be empty line after end of comment." />
    </module>

    <!-- Проверяет, что нет двух точек подряд или через пробелы. -->
    <module name="Regexp">
      <property name="format" value="[^.]\.[^\S\r\n]*\.[^.]" />
      <property name="illegalPattern" value="true" />
      <property name="message" value="Can't be specified two dots in a row." />
    </module>

    <!-- Проверяет отсутствие пробелов перед закрывающимся тегом p. -->
    <module name="Regexp">
      <property name="format" value="\.\s&lt;" />
      <property name="illegalPattern" value="true" />
      <property name="message" value="Can't be space before tag 'p'." />
    </module>

    <!-- Block -->

    <!-- Проверяет расположение }. -->
    <module name="RightCurly">
      <property name="option" value="alone_or_singleline"/>
    </module>

    <!-- Проверяет расположение {. -->
    <module name="LeftCurly"/>

    <!-- Проверяет, что нет пустых блоков do, else, for, if, while. -->
    <module name="EmptyBlock"/>

    <!-- Проверяет наличие фигурных скобок вокруг блоков do, else, for, if, while. -->
    <module name="NeedBraces"/>

    <!-- Проверяет, что нет пустых блоков catch. -->
    <module name="EmptyCatchBlock"/>

    <!-- Modifiers -->

    <!-- Проверяет порядок модификаторов элемента. Например, final private не правильно -->
    <module name="ModifierOrder"/>

    <!-- Проверяет наличие избыточных ключевых слов. -->
    <module name="RedundantModifier"/>

    <!--  Naming Conventions -->

    <!-- Проверяет, что наименования abstract классов начинаются со слова Abstract. -->
    <module name="AbstractClassName"/>

    <!-- Проверяет, что наименования параметров методов соответствуют шаблону "^(e|t|ex|[a-z][a-z][a-zA-Z]+)$". -->
    <module name="CatchParameterName"/>

    <!-- Проверяет, что наименования параметров типизации класса соответствуют шаблону "^[A-Z]$". -->
    <module name="ClassTypeParameterName"/>

    <!-- Проверяет, что наименования констант соответствуют шаблону "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$". -->
    <module name="ConstantName"/>

    <!-- Проверяет, что наименования переменных, параметров и полей не являются недопустимым именем. Недопустимы: record|yield|var|permits|sealed|_. -->
    <module name="IllegalIdentifierName"/>

    <!-- Проверяет, что наименования параметров типизации интерфейса соответствуют шаблону "^[A-Z][1-9]?$". -->
    <module name="InterfaceTypeParameterName">
      <property name="format" value="^[A-Z][1-9]?$"/>
    </module>

    <!-- Проверяет, что наименования локальных final переменных соответствуют шаблону "^[a-z][a-zA-Z0-9]*$". -->
    <module name="LocalFinalVariableName"/>

    <!-- Проверяет, что наименования локальных переменных не содержат DTO. -->
    <module name="LocalVariableName">
      <property name="format" value="^((?!DTO).)*$"/>
    </module>

    <!-- Проверяет, что наименования полей и констант соответствуют шаблону "^[a-z][a-zA-Z0-9]*$". -->
    <module name="MemberName"/>

    <!-- Проверяет, что наименования методов соответствуют шаблону "^[a-z][a-zA-Z0-9]*$". -->
    <module name="MethodName"/>

    <!-- Проверяет, что наименования параметров типизации методов соответствуют шаблону "^[A-Z]$". -->
    <module name="MethodTypeParameterName"/>

    <!-- Проверяет, что наименования пакетов соответствуют шаблону "^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$". -->
    <module name="PackageName"/>

    <!-- Проверяет, что наименования параметров соответствуют шаблону "^[a-z][a-zA-Z0-9]*$". -->
    <module name="ParameterName"/>

    <!-- Проверяет, что наименования компонентов record соответствуют шаблону "^[a-z][a-zA-Z0-9]*$". -->
    <module name="RecordComponentName"/>

    <!-- Проверяет, что наименования параметров типизации record соответствуют шаблону "^[A-Z]$". -->
    <module name="RecordTypeParameterName"/>

    <!-- Проверяет, что наименования статических переменных соответствуют шаблону "^[a-z][a-zA-Z0-9]*$". -->
    <module name="StaticVariableName"/>

    <!-- Проверяет, что наименования статических типов соответствуют шаблону "^[a-z][a-zA-Z0-9]*$". -->
    <module name="TypeName"/>

    <!-- Проверяет, что наименования переменных, участвующих в лямбда выражениях, соответствуют шаблону "^[a-z][a-zA-Z0-9]*$". -->
    <module name="LambdaParameterName"/>

    <!-- Проверяет, что в названиях нет аббревиатур с длинной больше указанной. -->
    <module name="AbbreviationAsWordInName">
      <property name="allowedAbbreviationLength" value="2"/>
      <property name="allowedAbbreviations" value="DTO"/>
    </module>

    <!-- Whitespace -->

    <!-- Проверяет правильность переноса операторов. Например, при переносе строки оператор + должен переносится. -->
    <module name="OperatorWrap"/>

    <!-- Проверяет, что нет дублирования пробелов. -->
    <module name="SingleSpaceSeparator"/>

    <!-- Miscellaneous-->

    <!-- Комментарии должны иметь отступ на том же уровне, что и окружающий код. -->
    <module name="CommentsIndentationCheck"/>

    <!-- Проверяет наличие пустых файлов. -->
    <module name="NoCodeInFile"/>

    <!-- Проверяет, TodoComment комментариев. Проверяет только коментарий строчными буквами. -->
    <module name="TodoComment">
      <property name="format" value="todo"/>
    </module>

    <!-- Проверяет, что строки с кодом не заканчиваются комментарием. -->
    <module name="TrailingComment">
      <property name="format" value="^\s*@SuppressWarnings.*|^[\s});]*$"/>
    </module>

    <!-- Проверяет, что тип long определен в верхнем регистре. -->
    <module name="UpperEll"/>

    <!-- Javadoc-->

    <!-- Порядок javadoc-тегов. Например, @param раньше @return. -->
    <module name="AtclauseOrder"/>

    <!-- Местоположение javadoc. Например, должен быть перед аннотациями класса, а не после них. -->
    <module name="InvalidJavadocPosition"/>

    <!-- Местоположение javadoc-тегов. Например, между * и @ не должно быть символов (кроме таких как @code). -->
    <module name="JavadocBlockTagLocation" />

    <!-- Текст javadoc начинается на следующей строке после /**. -->
    <module name="JavadocContentLocationCheck"/>

    <!-- @return, если не void. @param для каждого параметра. @throws, если бросает исключение. -->
    <module name="JavadocMethod">
      <property name="validateThrows" value="true"/>
    </module>

    <!-- Строки начинаются со звёздочки. -->
    <module name="JavadocMissingLeadingAsterisk"/>

    <!-- После * в начале строки идёт пробел. -->
    <module name="JavadocMissingWhitespaceAfterAsterisk"/>

    <!-- JavadocPackage module - проверяет, что у каждого package есть package-info.java файл. Не используем. -->

    <!-- В javadoc все предложения внутри тегов параграфа. Между параграфами пустая строка. -->
    <module name="JavadocParagraph"/>

    <!-- Первое предложение javadoc заканчивается точкой. У javadoc'а есть тело. 8. -->
    <!-- Если добавить checkEmptyJavadoc, то будет 250. Так много из-за enum'ов в классах моделей (там только @see). -->
    <!-- Проблема модельных enum-ов решается удалением ENUM_CONSTANT_DEF из токенов. Т.е. в представленном варианте 8 ошибок. -->
    <module name="JavadocStyle">
      <property name="checkEmptyJavadoc" value="true" />
      <property name="tokens" value="ANNOTATION_DEF , ANNOTATION_FIELD_DEF , CLASS_DEF , CTOR_DEF , ENUM_DEF , INTERFACE_DEF , METHOD_DEF , PACKAGE_DEF , VARIABLE_DEF , RECORD_DEF , COMPACT_CTOR_DEF" />
    </module>

    <!-- Исключения, у которых не нужна проверка javadoc -->
    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat" value="Формализованные поля модели"/>
      <property name="onCommentFormat" value="endregion"/>
    </module>

    <!-- Отступы - 0 пробелов (для @return после переноса отступа нет). Проверяет валидность html (например, закрытость открытых тегов). -->
    <module name="JavadocTagContinuationIndentation">
      <property name="offset" value="0"/>
      <property name="violateExecutionOnNonTightHtml" value="true"/>
    </module>

    <!-- Комментирование параметризованных типов. -->
    <module name="JavadocType"/>

    <!-- У каждой переменной есть javadoc. -->
    <!-- Отключено для всех кроме public. -->
    <module name="JavadocVariable">
      <property name="scope" value="public"/>
    </module>

    <!-- MissingJavadocPackage - проверяет комментарии в файле package-info.java. Не используем. -->

    <!-- У каждого класса/интерфейса есть javadoc. -->
    <module name="MissingJavadocType"/>

    <!-- Теги не должны быть без описания (например, не просто @throws IllegalStateException, но и комментарий). -->
    <module name="NonEmptyAtclauseDescription"/>

    <!-- Пустая строка перед телом javadoc и всеми тегами. -->
    <module name="RequireEmptyLineBeforeBlockTagGroup"/>

    <!-- SingleLineJavadoc - проверяет, что если нет тегов и может поместиться в одну строку, то сделать это. Не используем. -->
    <!-- SummaryJavadoc - позволяет запретить какие-то фразы в первом предложении. Позволяет указать, каким символом должно заканчиваться первое предложение. -->
    <!-- WriteTag - обязать использовать конкретные теги для конкретных сущностей. (например, author для каждого класса). -->


    <!-- Metrics https://checkstyle.sourceforge.io/config_metrics.html-->

    <!-- Классы не должны содержать много экземпляров других классов. -->
    <module name="ClassDataAbstractionCoupling"/>

    <!-- Количество линейно независимых маршрутов(цикломатическая сложность) в методе не должно большим. -->
    <module name="CyclomaticComplexity"/>

    <!-- Количество ациклических путей выполнения через метод не должно большим. -->
    <module name="NPathComplexity"/>

    <!-- Методы и классы не должны быть длинными, не учитывает пустые строки и переносы. -->
    <module name="JavaNCSS">
      <property name="methodMaximum" value="30"/>
      <property name="classMaximum" value="200"/>
    </module>

    <!-- Класс не должен зависеть от большого количества других классов. Не учитываются использования классов, заданных регулярными выражениями.  -->
    <module name="ClassFanOutComplexity">
      <property name="max" value="30"/>
      <property name="excludeClassesRegexps" value=".*Service$"/>
      <property name="excludeClassesRegexps" value=".*Cache$"/>
      <property name="excludeClassesRegexps" value=".*Validator$"/>
      <property name="excludeClassesRegexps" value=".*Id$"/>
      <property name="excludeClassesRegexps" value=".*DTO$"/>
    </module>


    <!-- Whitespaces, linebreaks, methods order -->

    <!-- Проверяет корректно расставленные пробелы. -->
    <module name="WhitespaceAround"/>

    <!-- Проверяет что перед символами [., ;, ..., :] нет пробелов и переносов строк. -->
    <module name="NoWhitespaceBefore"/>

    <!-- Проверяет, что после точки, запятой и перечисленных литералов есть пробел. -->
    <module name="WhitespaceAfter">
      <property name="tokens" value="COMMA, SEMI, LITERAL_IF, LITERAL_ELSE, LITERAL_WHILE, LITERAL_DO, LITERAL_FOR"/>
    </module>

    <!-- Проверяет отсутствие пробелов после открывающей и перед закрывающей круглой скобкой. -->
    <module name="ParenPad"/>

    <!-- Проверяет отсутствие пробелов между методом и параметрами. -->
    <module name="MethodParamPad"/>

    <!-- Проверяет отсутствие лишних пробелов в использованиях генериков. -->
    <module name="GenericWhitespace"/>

    <!-- Проверяет, что между полями и методами есть пустая строка. -->
    <module name="EmptyLineSeparator"/>

    <!-- Проверяет что перегруженные методы идут в правильном порядке. -->
    <module name="OverloadMethodsDeclarationOrder"/>


    <!-- Class Design -->

    <!-- Переменные должны быть private. Константы могут быть public -->
    <module name="VisibilityModifier">
      <!-- Разрешает уровень protected -->
      <property name="protectedAllowed" value="true"/>
    </module>

    <!-- Внутренние и вложенные классы должны располагаться снизу -->
    <module name="InnerTypeLast"/>


    <!-- Imports -->

    <!-- Проверяет отсутствие * в импортах -->
    <module name="AvoidStarImport"/>

    <!-- Проверяет отсутствие статических импортов -->
    <module name="AvoidStarImport"/>

    <!-- Проверяет отсутствие неиспользуемых и повторных импортов -->
    <module name="UnusedImports"/>

    <!-- Проверяет отсутствие указанных пакетов и классов в проекте -->
    <module name="IllegalImport">
      <property name="id" value="defaultIllegalImports"/>
      <!-- Запрещаемые классы -->
      <property
        name="illegalClasses"
        value="
          io.ebean.annotation.TenantId,
          play.libs.Json,
          play.api.libs.json.Json,
          tyrex.services.UUID,
          com.google.inject.Inject,
          com.google.inject.Singleton,
          com.google.inject.Provider,
          jakarta.validation.constraints.AssertTrue,
          jakarta.validation.constraints.AssertFalse,
          jakarta.validation.constraints.Null,
        "
      />
    </module>

    <module name="IllegalImport">
      <property name="id" value="illegalModuleImports"/>
      <property
        name="illegalClasses"
        value="com.google.inject.AbstractModule,"
      />
      <message
              key="import.illegal"
              value="Using of plain modules is disallowed, use AbstractBusinessModule and descendants"
      />
    </module>

    <!-- Проверяет отсутствие повторяющихся строковых литералов, не вынесенных в отдельную константу. -->
    <module name="MultipleStringLiterals">
      <property name="allowedDuplicates" value="2"/>
      <property name="ignoreStringsRegexp" value='^(", ")|("\+")|("\/")|("\(")|("\)")$'/>
    </module>

    <!-- Проверяет отсутствие "магических" чисел (числа без контекста, "захардкоженные"). -->
    <module name="MagicNumber"/>


    <!-- Coding -->

    <!-- Проверяет, что инициализация массива не содержит trailing comma. -->
    <module name="ArrayTrailingComma"/>

    <!-- Проверяет, что нет двойных фигурных скобок при инициализации. -->
    <module name="AvoidDoubleBraceInitialization"/>

    <!-- Проверяет отсутствие вызова конструктора суперкласса без аргументов. -->
    <module name="AvoidNoArgumentSuperConstructorCall"/>

    <!-- Проверяет, что классы, которые определяют метод equals(), также переопределяют метод equals(Object). -->
    <module name="CovariantEquals"/>

    <!-- Проверяет, что поля расположены в правильном порядке при объявлении. -->
    <module name="DeclarationOrder"/>

    <!-- Проверяет switch на то, что default в конце. -->
    <module name="DefaultComesLast"/>

    <!-- Проверяет отсутствие пустых выражений. -->
    <module name="EmptyStatement"/>

    <!-- Проверяет корректность выражений equals. -->
    <module name="EqualsAvoidNull"/>

    <!-- Проверяет, что все поля инициализированы. -->
    <module name="ExplicitInitialization"/>

    <!-- Проверяет наличие break/return в case'ах для switch. -->
    <module name="FallThrough"/>

    <!-- Проверяет корректность объявления Boolean и Integer. -->
    <module name="IllegalInstantiation">
      <property name="classes" value="java.lang.Boolean, java.lang.Integer"/>
      <property name="tokens" value="CLASS_DEF, LITERAL_NEW, PACKAGE_DEF, IMPORT"/>
    </module>

    <!-- Проверяет, что не бросаются запрещенные исключения. -->
    <module name="IllegalThrows">
      <property name="illegalClassNames" value="NullPointerException, Error, java.lang.Error, RuntimeException, java.lang.RuntimeException, Throwable, java.lang.Throwable"/>
    </module>

    <!-- Проверяет, что не используются запрещенные выражения. -->
    <module name="IllegalToken">
      <property name="tokens" value="BAND_ASSIGN, BOR_ASSIGN, BXOR_ASSIGN, COMPACT_CTOR_DEF, DEC, BAND_ASSIGN, DIV_ASSIGN, EMPTY_STAT, LITERAL_ASSERT, MINUS_ASSIGN, MOD_ASSIGN, SL_ASSIGN, SR_ASSIGN, STAR_ASSIGN, STATIC_INIT, STRICTFP"/>
    </module>

    <!--
        Проверяет, что не используется статический импорт.
        Данная проверка была вынесена отдельно, чтобы была возможность отключить статический импорт в тестах, оставив
        все остальные проверки включенными.
    -->
    <module name="IllegalToken">
      <property name="tokens" value="STATIC_IMPORT"/>
      <property name="id" value="staticImportCheck"/>
    </module>

    <!-- Проверяет отсутствие вложенности при присваиваниях. -->
    <module name="InnerAssignment"/>

    <!-- Проверяет, что приватные методы следуют строго за публичными. -->
    <module name="MatchXpath">
      <property name="query" value="//METHOD_DEF[.//LITERAL_PRIVATE and
          following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]"/>
      <message key="matchxpath.match" value="Private methods must appear after public methods"/>
    </module>

    <!-- Проверяет, что protected методы следуют строго за public. -->
    <module name="MatchXpath">
      <property name="query" value="//METHOD_DEF[.//LITERAL_PROTECTED and
          following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]"/>
      <message key="matchxpath.match" value="Protected methods must appear after public methods"/>
    </module>

    <!-- Проверяет, что private методы следуют строго за protected. -->
    <module name="MatchXpath">
      <property name="query" value="//METHOD_DEF[.//LITERAL_PRIVATE and
          following-sibling::METHOD_DEF[.//LITERAL_PROTECTED]]"/>
      <message key="matchxpath.match" value="Private methods must appear after protected methods"/>
    </module>

    <!-- Проверяет, что private поля следуют строго за public. -->
    <module name="MatchXpath">
      <property name="query" value="//VARIABLE_DEF[.//LITERAL_PRIVATE and
      following-sibling::VARIABLE_DEF[.//LITERAL_PUBLIC]]"/>
      <message key="matchxpath.match" value="Private fields must appear after public fields"/>
    </module>

    <!-- Проверяет, что protected поля следуют строго за public полями. -->
    <module name="MatchXpath">
      <property name="query" value="//VARIABLE_DEF[.//LITERAL_PROTECTED and
          following-sibling::VARIABLE_DEF[.//LITERAL_PUBLIC]]"/>
      <message key="matchxpath.match" value="Protected fields must appear after public fields"/>
    </module>

    <!-- Проверяет, что после объявления региона private не следует объявление protected сущности. -->
    <module name="MatchXpath">
      <property name="query" value="//SINGLE_LINE_COMMENT[.//COMMENT_CONTENT[@text='region Private\n']
          and following-sibling::LITERAL_PROTECTED]"/>
      <message key="matchxpath.match" value="Private region must contains only private methods"/>
    </module>

    <!-- Проверяет, что после объявления региона private не следует объявление public сущности. -->
    <module name="MatchXpath">
      <property name="query" value="//SINGLE_LINE_COMMENT[.//COMMENT_CONTENT[@text='region Private\n']
          and following-sibling::LITERAL_PUBLIC]"/>
      <message key="matchxpath.match" value="Private region must contains only private methods"/>
    </module>

    <!-- Проверяет, что после объявления региона public не следует объявление private сущности. -->
    <module name="MatchXpath">
      <property name="query" value="//SINGLE_LINE_COMMENT[.//COMMENT_CONTENT[@text='region Public\n']
          and following-sibling::LITERAL_PRIVATE]"/>
      <message key="matchxpath.match" value="Public region must contains only public methods"/>
    </module>

    <!-- Проверяет, что после объявления региона public не следует объявление protected сущности. -->
    <module name="MatchXpath">
      <property name="query" value="//SINGLE_LINE_COMMENT[.//COMMENT_CONTENT[@text='region Public\n']
          and following-sibling::LITERAL_PROTECTED]"/>
      <message key="matchxpath.match" value="Public region must contains only public methods"/>
    </module>

    <!-- Проверяет, что после объявления региона protected не следует объявление public сущности. -->
    <module name="MatchXpath">
      <property name="query" value="//SINGLE_LINE_COMMENT[.//COMMENT_CONTENT[@text='region Protected\n']
          and following-sibling::LITERAL_PUBLIC]"/>
      <message key="matchxpath.match" value="Protected region must contains only protected methods"/>
    </module>

    <!-- Проверяет, что после объявления региона protected не следует объявление private сущности. -->
    <module name="MatchXpath">
      <property name="query" value="//SINGLE_LINE_COMMENT[.//COMMENT_CONTENT[@text='region Protected\n']
          and following-sibling::LITERAL_PRIVATE]"/>
      <message key="matchxpath.match" value="Protected region must contains only protected methods"/>
    </module>

    <!-- Проверяет, что все switch имеют default. -->
    <module name="MissingSwitchDefault"/>

    <!-- Проверяет, что переменные, управляемые циклом, не меняются внутри него. -->
    <module name="ModifiedControlVariable">
      <property name="skipEnhancedForLoopVariable" value="true"/>
    </module>

    <!-- Проверяет, что переменные объявляются по одной в строке.-->
    <module name="MultipleVariableDeclarations"/>

    <!-- Проверяет, что вложенность циклов for меньше определенной глубины. -->
    <module name="NestedForDepth"/>

    <!-- Проверяет, что вложенность циклов if меньше определенной глубины. -->
    <module name="NestedIfDepth"/>

    <!-- Проверяет, что вложенность try меньше определенной глубины. -->
    <module name="NestedTryDepth"/>

    <!-- Проверяет, что метод clone класса Object не переопределен. -->
    <module name="NoClone"/>

    <!-- Проверяет, что в enum'ах не используется trailing comma. -->
    <module name="NoEnumTrailingComma"/>

    <!-- Проверяет отсутствие метода finalize без параметров. -->
    <module name="NoFinalizer"/>

    <!-- Проверяет, имеет ли класс пакет, и соответствует ли имя пакета имени директории файла. -->
    <module name="PackageDeclaration"/>

    <!-- Проверяет, что поля и методы вызываются через this. -->
    <module name="RequireThis">
      <property name="validateOnlyOverlapping" value="false"/>
    </module>

    <!-- Проверяет, что количество return'ов не больше указанного. -->
    <module name="ReturnCount">
      <property name="max" value="4"/>
      <property name="maxForVoid" value="4"/>
    </module>

    <!-- Проверяет, что булевы выражения нельзя упростить. -->
    <module name="SimplifyBooleanExpression"/>

    <!-- Проверяет, что булевы return выражения нельзя упростить. -->
    <module name="SimplifyBooleanReturn"/>

    <!-- Проверяет, что строки сравниваются через equals. -->
    <module name="StringLiteralEquality"/>

    <!-- Проверяет, что нет лишней ";" после объявления типа. -->
    <module name="UnnecessarySemicolonAfterOuterTypeDeclaration"/>

    <!-- Проверяет, что нет лишней ";" после объявления экземпляра типа. -->
    <module name="UnnecessarySemicolonAfterTypeMemberDeclaration"/>

    <!-- Проверяет, что нет лишней ";" в enum'ах. -->
    <module name="UnnecessarySemicolonInEnumeration"/>

    <!-- Проверяет, что нет лишней ";" в блоках try-with-resources. -->
    <module name="UnnecessarySemicolonInTryWithResources"/>

    <!-- Проверяет расстояние между объявлением переменной и её первым использованием. Максимальное значение промежутка по умолчанию - 3. -->
    <module name="VariableDeclarationUsageDistance">
      <property name="validateBetweenScopes" value="true"/>
    </module>

  </module>

  <!-- Проверяет что строка не превышает заданного значения -->
  <module name="LineLength">
    <!-- Задаём значение в 120 символов -->
    <property name="max" value="120"/>
    <!-- Игнорирует строки импортов и пакетов -->
    <property name="ignorePattern" value="^(package|import|@import) .*"/>
  </module>

  <!-- Модуль для задания пути файла исключений. -->
  <module name="SuppressionFilter">
    <property name="file" value="./checkstyle-suppression.xml"/>
  </module>

</module>
